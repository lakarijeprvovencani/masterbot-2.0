import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Nedostaju Supabase environment varijable')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Test email
const testEmail = `step-test-${Date.now()}@example.com`
const testPassword = 'test123456'

async function testStepByStep() {
  console.log('üöÄ Testiram korak po korak ƒçuvanje podataka...')
  console.log(`üìß Test email: ${testEmail}`)
  
  try {
    // 1. SIGNUP
    console.log('\n1Ô∏è‚É£ Testiram signup...')
    const { data: signupData, error: signupError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword
    })
    
    if (signupError) {
      console.error('‚ùå Signup gre≈°ka:', signupError)
      return
    }
    
    console.log('‚úÖ Signup uspe≈°an:', signupData.user.id)
    
    // 2. KREIRAJ PROFIL
    console.log('\n2Ô∏è‚É£ Kreiram profil...')
    const { error: profileError } = await supabase
      .from('profiles')
      .insert({
        id: signupData.user.id,
        email: testEmail,
        onboarding_completed: false
      })
    
    if (profileError) {
      console.error('‚ùå Gre≈°ka pri kreiranju profila:', profileError)
    } else {
      console.log('‚úÖ Profil kreiran')
    }
    
    // 3. SIMULIRAJ STEP 1 - Company name i industry
    console.log('\n3Ô∏è‚É£ Simuliram Step 1 - Company name i industry...')
    const { error: step1Error } = await supabase
      .from('user_brain')
      .insert({
        user_id: signupData.user.id,
        company_name: 'Test Company Step 1',
        industry: 'Technology'
      })
    
    if (step1Error) {
      console.error('‚ùå Gre≈°ka pri Step 1:', step1Error)
    } else {
      console.log('‚úÖ Step 1 uspe≈°no saƒçuvan')
    }
    
    // 4. SIMULIRAJ STEP 2 - Goals
    console.log('\n4Ô∏è‚É£ Simuliram Step 2 - Goals...')
    const { error: step2Error } = await supabase
      .from('user_brain')
      .update({
        goals: ['Increase sales', 'Improve marketing']
      })
      .eq('user_id', signupData.user.id)
    
    if (step2Error) {
      console.error('‚ùå Gre≈°ka pri Step 2:', step2Error)
    } else {
      console.log('‚úÖ Step 2 uspe≈°no saƒçuvan')
    }
    
    // 5. SIMULIRAJ STEP 3 - Website
    console.log('\n5Ô∏è‚É£ Simuliram Step 3 - Website...')
    const { error: step3Error } = await supabase
      .from('user_brain')
      .update({
        website: 'https://test-company.com'
      })
      .eq('user_id', signupData.user.id)
    
    if (step3Error) {
      console.error('‚ùå Gre≈°ka pri Step 3:', step3Error)
    } else {
      console.log('‚úÖ Step 3 uspe≈°no saƒçuvan')
    }
    
    // 6. SIMULIRAJ STEP 4 - Demografija
    console.log('\n6Ô∏è‚É£ Simuliram Step 4 - Demografija...')
    const { error: step4Error } = await supabase
      .from('user_brain')
      .update({
        data: {
          team_size: '5-10',
          monthly_revenue: '10k-50k',
          heard_from: 'Google'
        }
      })
      .eq('user_id', signupData.user.id)
    
    if (step4Error) {
      console.error('‚ùå Gre≈°ka pri Step 4:', step4Error)
    } else {
      console.log('‚úÖ Step 4 uspe≈°no saƒçuvan')
    }
    
    // 7. FINALNA PROVERA
    console.log('\n7Ô∏è‚É£ Finalna provera svih koraka...')
    const { data: finalBrainData, error: finalBrainError } = await supabase
      .from('user_brain')
      .select('*')
      .eq('user_id', signupData.user.id)
      .single()
    
    if (finalBrainError) {
      console.error('‚ùå Gre≈°ka pri finalnoj proveri:', finalBrainError)
    } else {
      console.log('‚úÖ Finalni user brain podaci:', {
        company_name: finalBrainData.company_name,
        industry: finalBrainData.industry,
        goals: finalBrainData.goals,
        website: finalBrainData.website,
        team_size: finalBrainData.data?.team_size,
        monthly_revenue: finalBrainData.data?.monthly_revenue,
        heard_from: finalBrainData.data?.heard_from
      })
    }
    
    console.log('\nüéâ Test korak po korak zavr≈°en!')
    console.log(`üìß Test korisnik: ${testEmail}`)
    console.log(`üîë ID: ${signupData.user.id}`)
    
  } catch (error) {
    console.error('‚ùå Gre≈°ka tokom testa:', error)
  }
}

testStepByStep()
